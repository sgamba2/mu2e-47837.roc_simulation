
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section {Introduction to the analysis}

In this note, we present an analysis of the data derived from the readout teststands of the motherboard.
This analysis was performed with the aim of characterizing the functionality of the Data Acquisition (DAQ) system.
A signal generator was employed to send pulses and we tried to understand the output and non-output of the DTC. 
Our study centered on testing the performance of ROCs and DTCs, actually we were reading 1 ROC (96 channels), 
which is the equivalent of one panel or 2 ROCs. The analysis was executed employing a single DTC.
During the analysis, we had the capability to change different generator's features. We varied the event
window duration between successive pulses and modulated the generator's operating frequency. 
Specifically, we could operate with two distinct frequencies: 31.29 MHz/(2$^7$+1), resulting in approximately 250 kHz,
and 31.29 MHz/(2$^9$+1), 60 kHz. \\
The selection of the event window duration and the frequency played an important role in determining the number of hits per event,
considering that the ROC buffer possessed a storage capacity for up to 255 hits. The relationship between the generator 
and readout counts can be summarized as follows:
\begin{itemize}
    \item $N_{gen} \ < \ $255: $N_{readout} \ = \ N_{gen}$;
    \item $N_{gen} \ \geq \ $255: $N_{readout} \ = \ 255$.
\end{itemize}
\section{Monte Carlo simulation}\label{MonteCarlo}
To ensure a comprehensive understanding of our system, we initiated a Monte Carlo Simulation of our Data Acquisition (DAQ) system. 
Given that the maximum allowable number of hits per event is 255, the simulation protocol adheres to the following sequential steps:
\begin{itemize}
  \item Within a time interval ranging from 0 $\mu$s to the reciprocal of the generator frequency, we generated the first event ($t_0$) by following a uniform distribution;
    \item After verified that hits from the same channel, are separated by an interval equivalent to the reciprocal of the generator frequency, we proceeded to 
      generate the second event ($t_1$) by summing this specific time increment to $t_0$;
      \item Subsequently, we verified whether the second pulse remained within the predefined time window. If it did, we included this hit in the ongoing event under construction;
      \item The process of event creation continued until the count of hits reached the maximum threshold of 255, at which point the event construction was terminated.
\end{itemize}
Furthermore, the simulation accounts for the channel to channel and FPGA to FPGA delays. 
This comprehensive approach ensures a faithful representation of the real-world operational aspects of the DAQ system.


%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:
